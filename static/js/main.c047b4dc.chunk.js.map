{"version":3,"sources":["components/Nav/Nav.tsx","App.tsx","components/Loader/Loader.tsx","api.ts","components/LoadingErrorMessage/LoadingErrorMessage.tsx","components/NoPeopleMessage/NoPeopleMessage.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","pages/PeoplePage.tsx","pages/HomePage.tsx","pages/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","cn","Nav","className","role","to","App","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","LoadingErrorMessage","NoPeopleMessage","PersonLink","person","slug","sex","name","PeopleTable","people","personSlug","useParams","length","map","born","died","mother","motherName","father","fatherName","PeoplePage","useState","setPeople","error","setError","isLoading","setIsLoading","preparedPeople","data","editedData","find","useEffect","catch","finally","HomePage","NotFoundPage","Root","path","element","index","createRoot","document","getElementById","render"],"mappings":"6QAIMA,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAyCC,IAC5D,cACA,CACE,8BAA+BD,GAHd,EAORE,EAAgB,WAC3B,OACE,qBACE,UAAQ,MACRC,UAAU,iCACVC,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CAASA,UAAWJ,EAAcM,GAAG,IAArC,kBAIA,cAAC,IAAD,CACEF,UAAWJ,EACXM,GAAG,UAFL,0BAUT,EC7BYC,EAAM,kBACjB,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,sBAAMH,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UANW,E,eCJNI,G,MAAS,kBACpB,qBAAKJ,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCOf,SAASK,IAEd,OANYC,EAMA,IALL,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,KAMvBI,MAAK,kBAAMC,MATA,oEASN,IACLD,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,IARlB,IAAcP,CASb,CCZM,IAAMQ,EAAgC,WAC3C,OACE,mBAAG,UAAQ,qBAAqBd,UAAU,kBAA1C,iCAIH,ECNYe,EAA4B,WACvC,OACE,mBAAG,UAAQ,kBAAX,8CAIH,ECCYC,EAA8B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5C,OACE,cAAC,IAAD,CACEf,GAAIe,EAAOC,KACXlB,UAAWF,IAAG,CACZ,kBAAkC,MAAfmB,EAAOE,MAH9B,SAMGF,EAAOG,MAGb,ECTYC,EAA+B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEvCC,EADWC,cAATN,MACmB,GAE3B,OACE,wBACE,UAAQ,cACRlB,UAAU,yDAFZ,UAUE,gCACE,+BACE,sCACA,qCACA,sCACA,sCACA,wCACA,6CAIJ,gCAEuB,KAAb,OAANsB,QAAM,IAANA,OAAA,EAAAA,EAAQG,QACNH,EAAOI,KAAI,SAAAT,GAAM,OACf,qBAEE,UAAQ,SACRjB,UAAWF,IAAG,CACZ,yBAA0ByB,IAAeN,EAAOC,OAJpD,UAOE,6BACE,cAAC,EAAD,CACED,OAAQA,MAIZ,6BAAKA,EAAOE,MACZ,6BAAKF,EAAOU,OACZ,6BAAKV,EAAOW,OACZ,6BAEIX,EAAOY,OACL,cAAC,EAAD,CAAYZ,OAAQA,EAAOY,SAE3BZ,EAAOa,YAAc,MAI3B,6BAEIb,EAAOc,OACL,cAAC,EAAD,CAAYd,OAAQA,EAAOc,SAE3Bd,EAAOe,YAAc,QA7BtBf,EAAOC,KAFC,IAsCjB,cAAC,EAAD,QAMX,EC1EYe,EAAuB,WAClC,MAA4BC,mBAA0B,MAAtD,mBAAOZ,EAAP,KAAea,EAAf,KACA,EAA0BD,oBAAS,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KAEMC,EAAiB,SAACC,GACtB,IAAMC,EAAaD,EAAKf,KAAI,SAAAT,GAC1B,IAAIc,EACAF,EAUJ,OARIZ,EAAOa,aACTD,EAASY,EAAKE,MAAK,qBAAGvB,OAAoBH,EAAOa,UAA9B,KAGjBb,EAAOe,aACTD,EAASU,EAAKE,MAAK,qBAAGvB,OAAoBH,EAAOe,UAA9B,KAGd,2BAAKf,GAAZ,IAAoBY,SAAQE,UAC7B,IAEDI,EAAUO,EACX,EAWD,OATAE,qBAAU,WACRL,GAAa,GAEblC,IACGK,KAAK8B,GACLK,OAAM,kBAAMR,GAAS,EAAf,IACNS,SAAQ,kBAAMP,GAAa,EAAnB,GACZ,GAAE,IAGD,qCACE,oBAAIvC,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,sBAAf,YAEK,OAACsB,QAAD,IAACA,MAAQG,SACR,cAAC,EAAD,CACEH,OAAQA,IAMZgB,GACE,cAAC,EAAD,KAKDA,KAAa,OAAChB,QAAD,IAACA,KAAQG,SACrB,cAAC,EAAD,IAKFW,GACE,cAAC,EAAD,WAOb,EC5EYW,EAAqB,WAChC,OACE,oBAAI/C,UAAU,QAAd,sBAEH,ECJYgD,EAAyB,WACpC,OACE,oBAAIhD,UAAU,QAAd,2BAEH,ECMYiD,EAAiB,WAC5B,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOC,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,IAAD,CAAUjD,GAAG,SACzC,cAAC,IAAD,CAAOgD,KAAK,SAASC,QAAS,cAAC,EAAD,IAA9B,SACE,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,EAAD,QAEhC,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,YAKlC,ECpBDE,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,EAAD,I","file":"static/js/main.c047b4dc.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => cn(\n  'navbar-item',\n  {\n    'has-background-grey-lighter': isActive,\n  },\n);\n\nexport const Nav: React.FC = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={getLinkClass} to=\"/\">\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import './App.scss';\n\nimport { Outlet } from 'react-router-dom';\n\nimport { Nav } from './components/Nav';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Nav />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React from 'react';\n\nexport const LoadingErrorMessage: React.FC = () => {\n  return (\n    <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n      Something went wrong\n    </p>\n  );\n};\n","import React from 'react';\n\nexport const NoPeopleMessage: React.FC = () => {\n  return (\n    <p data-cy=\"noPeopleMessage\">\n      There are no people on the server\n    </p>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={person.slug}\n      className={cn({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { PersonLink } from '../PersonLink/PersonLink';\nimport { Person } from '../../types';\nimport { NoPeopleMessage } from '../NoPeopleMessage';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug } = useParams();\n  const personSlug = slug || '';\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"\n        table\n        is-striped\n        is-hoverable\n        is-narrow\n        is-fullwidth\n    \"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          people?.length !== 0 ? (\n            people.map(person => (\n              <tr\n                key={person.slug}\n                data-cy=\"person\"\n                className={cn({\n                  'has-background-warning': personSlug === person.slug,\n                })}\n              >\n                <td>\n                  <PersonLink\n                    person={person}\n                  />\n                </td>\n\n                <td>{person.sex}</td>\n                <td>{person.born}</td>\n                <td>{person.died}</td>\n                <td>\n                  {\n                    person.mother ? (\n                      <PersonLink person={person.mother} />\n                    ) : (\n                      person.motherName || '-'\n                    )\n                  }\n                </td>\n                <td>\n                  {\n                    person.father ? (\n                      <PersonLink person={person.father} />\n                    ) : (\n                      person.fatherName || '-'\n                    )\n                  }\n                </td>\n              </tr>\n            ))\n          ) : (\n            <NoPeopleMessage />\n          )\n        }\n      </tbody>\n    </table>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../components/Loader';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport {\n  LoadingErrorMessage,\n} from '../components/LoadingErrorMessage/LoadingErrorMessage';\nimport { NoPeopleMessage } from '../components/NoPeopleMessage/NoPeopleMessage';\nimport { PeopleTable } from '../components/PeopleTable/PeopleTable';\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const preparedPeople = (data: Person[]) => {\n    const editedData = data.map(person => {\n      let father;\n      let mother;\n\n      if (person.motherName) {\n        mother = data.find(({ name }) => name === person.motherName);\n      }\n\n      if (person.fatherName) {\n        father = data.find(({ name }) => name === person.fatherName);\n      }\n\n      return { ...person, mother, father };\n    });\n\n    setPeople(editedData);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(preparedPeople)\n      .catch(() => setError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {\n            !!people?.length && (\n              <PeopleTable\n                people={people}\n              />\n            )\n          }\n\n          {\n            isLoading && (\n              <Loader />\n            )\n          }\n\n          {\n            !isLoading && !people?.length && (\n              <NoPeopleMessage />\n            )\n          }\n\n          {\n            error && (\n              <LoadingErrorMessage />\n            )\n          }\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nexport const HomePage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import React from 'react';\nimport {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const Root: React.FC = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"..\" />} />\n          <Route path=\"people\" element={<PeoplePage />}>\n            <Route path=\":slug?\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}